# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main
  - refs/tags/release/*
  - refs/pull/*
parameters:
  - name: myGetDeploy
    displayName: Deploy to MyGet
    type: boolean
    default: false
  - name: nuGetDeploy
    displayName: Deploy to NuGet
    type: boolean
    default: false
    
variables:
  solution: CSharpTest.Net.Collections.sln
  buildConfiguration: Release
stages:
    - stage: Build
      jobs:
        - job: A
          displayName: Build
          pool:
            vmImage: 'windows-latest'
          steps:
            - task: PowerShell@2
              displayName: 'Set version number'
              inputs:
                targetType: 'inline'
                script: |
                  $tag = "$(Build.SourceBranch)".Replace("refs/tags/release/","")
                  $regexString = "^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\+[0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*)?$"
                  $regex = new-object System.Text.RegularExpressions.Regex ($regexString,[System.Text.RegularExpressions.RegexOptions]::MultiLine)
                  Write-Host "Pushed tag is $tag"
                  if ($tag -match $regex)
                  {
                    Write-Host "$tag conforms to semantic version; Setting Azure DevOps variable PACKAGE_VERSION..."
                    Write-Host "##vso[build.addbuildtag]ReleaseBuild"
                  }
                  else
                  {
                    # Error out if the tag doesn't conform to semantic versioning standard
                    Write-Host "$tag does not conform to semantic versioning"
                    Write-Host "##vso[build.addbuildtag]ContinuouslyBuild"
                    $tag = "0.0.0-nightly$(Build.BuildNumber)"
                  }
                  Write-Host "##vso[task.setvariable variable=PACKAGE_VERSION]$tag"
                  Write-Host "PACKAGE_VERSION set to 0.0.0-nightly$(Build.BuildNumber)"

            - task: UseDotNet@2
              displayName: Use .NET 6.x
              inputs:
                version: 6.x
                performMultiLevelLookup: true
                includePreviewVersions: $(dotnetIncludePreviewVersions)
            - task: UseDotNet@2
              displayName: Use .NET 7.x #Multi targeted
              inputs:
                version: 7.x
                performMultiLevelLookup: true
                includePreviewVersions: $(dotnetIncludePreviewVersions)
            - task: DotNetCoreCLI@2
              displayName: Run dotnet restore
              inputs:
                command: restore
                projects: $(solution)
            - task: DotNetCoreCLI@2
              displayName: Run dotnet build
              inputs:
                command: build
                projects: $(solution)
                arguments: '--configuration $(buildConfiguration) --no-restore -p:ContinuousIntegrationBuild=true'
            - task: DotNetCoreCLI@2
              displayName: Run dotnet pack
              inputs:
                command: pack
                projects: $(solution)
                arguments: '--configuration $(buildConfiguration) --no-build --no-restore --output $(Build.ArtifactStagingDirectory)'
            - task: PublishPipelineArtifact@1
              displayName: Publish NuGet
              inputs:
                targetPath: $(Build.ArtifactStagingDirectory)
                artifactName: NuGet
                
  ###############################################
  ## Release
  ###############################################
    - stage: Deploy_MyGet
      displayName: MyGet pre-release
      dependsOn:
        - Build
        - Unit
      condition: and(succeeded(), or(startsWith(variables['Build.SourceBranch'], 'refs/tags/release/'), ${{parameters.myGetDeploy}}))
      jobs:
        - job:
          displayName: Push to pre-release feed
          steps:
            - checkout: none
            - task: DownloadPipelineArtifact@2
              displayName: Download NuGet
              inputs:
                artifact: NuGet
                path: $(Build.ArtifactStagingDirectory)
            - task: NuGetCommand@2
              displayName: NuGet push
              inputs:
                command: 'push'
                packagesToPush: $(Build.ArtifactStagingDirectory)/**/*.nupkg
                nuGetFeedType: 'internal'
                publishVstsFeed: 'd19ab31a-3bc3-4ce3-a2f9-8a22c538f7ad'
    - stage: Deploy_NuGet
      displayName: NuGet release
      dependsOn:
        - Deploy_MyGet
      condition: and(succeeded(), or(startsWith(variables['Build.SourceBranch'], 'refs/tags/release/'), ${{parameters.nuGetDeploy}}))
      jobs:
        - job:
          displayName: Push to NuGet
          steps:
            - checkout: none
            - task: DownloadPipelineArtifact@2
              displayName: Download NuGet
              inputs:
                artifact: NuGet
                path: $(Build.ArtifactStagingDirectory)
            - task: NuGetCommand@2
              displayName: NuGet push
              inputs:
                command: 'push'
                packagesToPush: $(Build.ArtifactStagingDirectory)/**/*.nupkg
                nuGetFeedType: 'internal'
                publishVstsFeed: 'd19ab31a-3bc3-4ce3-a2f9-8a22c538f7ad'